<UserControl x:Class="OptionsColor"
             x:Name="OptionsColor"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:cp="clr-namespace:ColorPicker;assembly=ColorPicker"
             mc:Ignorable="d"
             d:DesignHeight="10" d:DesignWidth="50">
    
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../../Common/Resources/Converter.xaml"/>
                <ResourceDictionary Source="../../Common/Resources/Icons.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            
            <VisualBrush x:Key="SeparatedColor">
                <VisualBrush.Visual>
                    <Canvas Width="10" Height="10">
                        <Canvas.Background>
                            <DrawingBrush>
                                <DrawingBrush.Drawing>
                                    <DrawingGroup>
                                        <DrawingGroup.Children>
                                            <GeometryDrawing Geometry="M 0,1 L 1,0 1,0 0,0"
                                                             Brush="{Binding Path=PrimaryColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ColorToBrushConverter}}" />
                                            <GeometryDrawing Geometry="M 0,1 L 1,1 1,0 0,1"
                                                             Brush="{Binding Path=SecondaryColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ColorToBrushConverter}}" />
                                        </DrawingGroup.Children>
                                    </DrawingGroup>
                                </DrawingBrush.Drawing>
                            </DrawingBrush>
                        </Canvas.Background>
                    </Canvas>
                </VisualBrush.Visual>
            </VisualBrush>

            <Style TargetType="{x:Type ToggleButton}" x:Key="ColorToggleButton">
                <Setter Property="Background" Value="{DynamicResource SeparatedColor}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ControlDefaultBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ControlDefaultForeground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="ClickMode" Value="Press"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True"
                            HorizontalAlignment="Stretch" 
                            VerticalAlignment="Stretch"
                            CornerRadius="0" >                                
                                <ContentPresenter x:Name="contentPresenter" 
                                          Focusable="False" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center"/>
                            </Border>                            
                            <ControlTemplate.Triggers>                                
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource SeparatedColor}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ControlSelectedForeground}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource SeparatedColor}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimaryMouseOverBorderBrush}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsChecked" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.Setters>
                                        <Setter Property="Background" TargetName="border" Value="{DynamicResource SeparatedColor}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimarySelectedMouseOverBorderBrush}"/>
                                    </MultiTrigger.Setters>
                                </MultiTrigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource SeparatedColor}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlPrimarySelectedBorderBrush}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource SeparatedColor}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ControlDisabledBorderBrush}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource ControlDisabledForeground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>

    </UserControl.Resources>

    <Grid DataContext="{Binding ElementName=OptionsColor}">
        <Grid.Background>
            <ImageBrush ImageSource="{StaticResource TransparentBackgoundImage}"
                        TileMode="Tile" ViewportUnits="Absolute" Viewport="0,0,4,4" />
        </Grid.Background>
        
        <ToggleButton Style="{DynamicResource ColorToggleButton}"
                      x:Name="TogglePopupButton" Cursor="Hand" >
        </ToggleButton>
        
        <Popup Name="ToggledPopup"                
               Height="400" 
               Width="250"               
               StaysOpen="False" 
               IsOpen="{Binding IsChecked, ElementName=TogglePopupButton, Mode=TwoWay}">

            <Border BorderThickness="1" 
                    BorderBrush="{DynamicResource ControlDefaultBorderBrush}" >
                <cp:StandardColorPicker 
                    Style="{DynamicResource DefaultColorPickerStyle}"
                    SelectedColor="{Binding Path=PrimaryColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    SecondaryColor="{Binding Path=SecondaryColor, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                    ShowAlpha="{Binding Path=ShowAlpha, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            </Border>      
            
        </Popup>

    </Grid>
</UserControl>
