<!--Das Telefonbuch ist von Tosker erstellt worden und auf Youtube und Github bereitgestellt:
    https://github.com/Tosker/ContactBook-Tutorial
    Es wurde duch Kruemelino zu Zwecken der Anzeige von Fritz!Box Kontakten angepasst und erweitert.-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fbd="clr-namespace:FBoxDial">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../../Common/Resources/Common.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate DataType="{x:Type fbd:TelefonbuchViewModel}">
        <fbd:TelbuchView/>
    </DataTemplate>

    <Style x:Key="MenuIconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="2"/>
    </Style>

    <Style x:Key="MenuToolButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="MinWidth" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="5"/>
    </Style>

    <Style x:Key="MenuTabTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="EditButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinHeight" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />
    </Style>
    
    <Style x:Key="DetailBorder" TargetType="Border">
        <Setter Property="BorderBrush" Value="{DynamicResource ContainerBorder}"/>
        <Setter Property="Background" Value="{DynamicResource ContainerBackground}"/>
    </Style>

    <Style x:Key="EditComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="EditBox" TargetType="{x:Type TextBoxBase}" BasedOn="{StaticResource {x:Type TextBoxBase}}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="favoriteCheckbox" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <StackPanel Orientation="Horizontal">
                        <ContentControl x:Name="checkboxImage" ContentTemplate="{StaticResource StarOutline}" Width="20" Height="20" Margin="4"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkboxImage" Property="ContentTemplate" Value="{StaticResource StarFull}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="checkboxImage" Property="ContentTemplate" Value="{StaticResource StarHalfFull}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconTextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="30"/>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate >

                    <DockPanel Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
                            <!--Icon-->
                            <ContentControl ContentTemplate="{Binding Path=Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                            Grid.Column="0" 
                                            Margin="8,0" 
                                            Height="16"
                                            HorizontalAlignment="Left" />
                            <!--Text-->
                            <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                              Grid.Column="0"
                                              Margin="0,0"
                                              HorizontalAlignment="Left" 
                                              VerticalAlignment="Center"/>
                        
                    </DockPanel>                      

                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
    
