<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fbd="clr-namespace:FBoxDial">

    <Style x:Key="SingleClickStyle" TargetType="DataGridCell">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="IsEditing" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="TimePickerButtonTemplate" TargetType="ButtonBase">
        <Border
            x:Name="ContentContainer" 
            Background="{TemplateBinding Background}" 
            BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="1"             
            SnapsToDevicePixels="True">
            <ContentPresenter 
                x:Name="Content"
                RecognizesAccessKey="True" 
                Content="{TemplateBinding Content}"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                Margin="{TemplateBinding Padding}" 
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter 
                    TargetName="ContentContainer"
                    Property="Background"
                    Value="LightBlue">
                </Setter>
            </Trigger>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter 
                    TargetName="ContentContainer"
                    Property="Background"
                    Value="LightBlue">
                </Setter>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
                <Setter 
                    TargetName="Content" 
                    Property="RenderTransform">
                    <Setter.Value>
                        <TranslateTransform Y="0.5"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter 
                    TargetName="Content" 
                    Property="RenderTransform">
                    <Setter.Value>
                        <TranslateTransform Y="0.5"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground">
                    <Setter.Value>
                        <DynamicResource ResourceKey="{x:Static SystemColors.GrayTextBrushKey}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="CheckBoxRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <CheckBox IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Mode=TwoWay}" IsHitTestVisible="False" Content="{TemplateBinding Content}"/>
                        <CheckBox IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Mode=TwoWay}" Content="{TemplateBinding Content}" Opacity="0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="{x:Type fbd:TimePicker}" TargetType="{x:Type fbd:TimePicker}">
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="23"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="0.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type fbd:TimePicker}">
                    <Border 
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <StackPanel                                
                                Orientation="Horizontal"
                                DataContext="{TemplateBinding fbd:TimePicker.SelectedTime}">
                                
                                <TextBox
                                    x:Name="PART_HourTextBox"
                                    Text="{Binding Hours, Mode=OneWay, StringFormat=00}"
                                    BorderBrush="{x:Null}"
                                    Width="20" VerticalAlignment="Center"/>   
                                <TextBlock
                                    Text=":"
                                    VerticalAlignment="Center"/>
                                <TextBox
                                    x:Name="PART_MinuteTextBox"
                                    Text="{Binding Minutes, Mode=OneWay, StringFormat=00}"
                                    BorderBrush="{x:Null}"
                                    Width="20" VerticalAlignment="Center"/>
                                <TextBlock
                                    Text=":"
                                    VerticalAlignment="Center"/>
                                <TextBox
                                    x:Name="PART_SecondTextBox"
                                    Text="{Binding Seconds, Mode=OneWay, StringFormat=00}"
                                    BorderBrush="{x:Null}"
                                    Width="20" VerticalAlignment="Center"/>

                                </StackPanel>
                            <Grid
                                Grid.Column="1">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Button        
                                    x:Name="PART_IncrementButton"
                                    Margin="1,1,6,0"
                                    Width="20"
                                    Template="{StaticResource TimePickerButtonTemplate}">
                                    <TextBlock                                                    
                                        Text="p"                                                    
                                        FontFamily="Wingdings 3"
                                        FontSize="6"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"/>
                                </Button>
                                <Button
                                    x:Name="PART_DecrementButton"
                                    Grid.Row="1"
                                    Margin="1,1,6,1"
                                    Width="20"
                                    Template="{StaticResource TimePickerButtonTemplate}">
                                    <TextBlock                                                    
                                        Text="q"                                                    
                                        FontFamily="Wingdings 3"
                                        FontSize="6"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"/>
                                </Button>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleButtonStyle">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" BorderThickness ="0" Padding="8,0,0,0" Margin="0">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.MenuHighlightColorKey}}"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.HighlightTextColorKey}}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.HotTrackColorKey}}"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.HighlightTextColorKey}}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconTextButton" TargetType="{x:Type Button}" >
        <Setter Property="Margin" Value="8" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>                   
                    <Grid Margin="0,0,24,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="24"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        
                        <ContentControl Content="{Binding Path=Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" 
                                        Grid.Column="0" Margin="4,0"                                    
                                        HorizontalAlignment="Left"/>
                        
                        <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                            Grid.Column="1"
                                            HorizontalAlignment="Center"/>

                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptCheckBox" TargetType="{x:Type CheckBox}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Margin="0,0,0,4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="151.5"/>
                        </Grid.ColumnDefinitions>

                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Grid.Column="0"/>
                        
                        <BulletDecorator Background="Transparent" 
                                         SnapsToDevicePixels="True"
                                         VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                         Grid.Column="1" >

                            <BulletDecorator.Bullet>
                                <CheckBox IsChecked="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                            </BulletDecorator.Bullet>
                        </BulletDecorator>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="OptTextBox" TargetType="{x:Type TextBox}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid Margin="0,0,0,4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="150"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Content="{Binding Path=Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                                        Grid.Column="0"/>

                        <TextBox Text="{Binding Path=Text, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                                 Grid.Column="1" Margin="0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptHeader" TargetType="{x:Type TextBlock}" >
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="Margin" Value="0,2,0,4"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
    </Style>

    <Style x:Key="OptComboBox" TargetType="{x:Type ComboBox}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid Margin="0,0,0,4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="150"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Content="{Binding Path=Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}"
                                                   Grid.Column="0"/>

                        <ComboBox   
                            ItemsSource="{Binding Path=ItemsSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}"
                            SelectedValue="{Binding Path=SelectedValue, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}"
                            DisplayMemberPath="{Binding Path=DisplayMemberPath, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}"
                            SelectedValuePath="{Binding Path=SelectedValuePath, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}"
                            Grid.Column="1"/>                        

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
  
    <Style TargetType="{x:Type DataGrid}" x:Key="DataGridStyle">
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HeadersVisibility" Value="None"/>
    </Style>

    <Style BasedOn="{StaticResource {x:Type DataGridColumnHeader}}" TargetType="{x:Type DataGridColumnHeader}" >
        <Setter Property="Padding" Value="4,0,0,0" />
    </Style>

    <Style x:Key="MiniIconButton" TargetType="{x:Type Button}" >
        <Setter Property="Margin" Value="0,4,4,0" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Margin" Value="0,4,4,0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
    </Style>

    

</ResourceDictionary>
